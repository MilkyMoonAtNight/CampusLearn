// <auto-generated />
using System;
using System.Collections.Generic;
using CampusLearn.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CampusLearn.Migrations
{
    [DbContext(typeof(CampusLearnContext))]
    partial class CampusLearnContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampusLearn.Models.ChatMessage", b =>
                {
                    b.Property<long>("ChatMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("chatmessageid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChatMessageID"));

                    b.Property<long>("ChatSessionID")
                        .HasColumnType("bigint")
                        .HasColumnName("chatsessionid");

                    b.Property<bool>("IsFromStudent")
                        .HasColumnType("boolean")
                        .HasColumnName("isfromstudent");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("messagetext");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sentat");

                    b.HasKey("ChatMessageID");

                    b.HasIndex("ChatSessionID");

                    b.ToTable("chatmessages", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.ChatSession", b =>
                {
                    b.Property<long>("ChatSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("chatsessionid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChatSessionID"));

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("endedat");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startedat");

                    b.Property<long>("StudentID")
                        .HasColumnType("bigint")
                        .HasColumnName("studentid");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("topic");

                    b.HasKey("ChatSessionID");

                    b.HasIndex("StudentID");

                    b.ToTable("chatsession", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.Degree", b =>
                {
                    b.Property<int>("DegreeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("degreeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DegreeID"));

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("degreename");

                    b.Property<int>("FacultyID")
                        .HasColumnType("integer")
                        .HasColumnName("facultyid");

                    b.HasKey("DegreeID");

                    b.HasIndex("FacultyID");

                    b.ToTable("degree", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.DegreeModule", b =>
                {
                    b.Property<int>("DegreeID")
                        .HasColumnType("integer")
                        .HasColumnName("degreeid");

                    b.Property<int>("ModuleID")
                        .HasColumnType("integer")
                        .HasColumnName("moduleid");

                    b.HasKey("DegreeID", "ModuleID");

                    b.HasIndex("ModuleID");

                    b.ToTable("degreemodule", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.Enrollment", b =>
                {
                    b.Property<long>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("enrollmentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EnrollmentID"));

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollmentdate");

                    b.Property<long>("StudentID")
                        .HasColumnType("bigint")
                        .HasColumnName("studentid");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("StudentID");

                    b.ToTable("enrollment", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.EnrollmentDegree", b =>
                {
                    b.Property<long>("EnrollmentID")
                        .HasColumnType("bigint")
                        .HasColumnName("enrollmentid");

                    b.Property<int>("DegreeID")
                        .HasColumnType("integer")
                        .HasColumnName("degreeid");

                    b.HasKey("EnrollmentID", "DegreeID");

                    b.HasIndex("DegreeID");

                    b.ToTable("enrollmentdegree", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.Faculty", b =>
                {
                    b.Property<int>("FacultyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("facultyid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacultyID"));

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("facultyname");

                    b.HasKey("FacultyID");

                    b.ToTable("faculty", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Contributions")
                        .HasColumnType("integer")
                        .HasColumnName("contributions");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("progress");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("forumtopic", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.MessageUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Groups")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("MessageUsers");
                });

            modelBuilder.Entity("CampusLearn.Models.ModuleCluster", b =>
                {
                    b.Property<int>("ClusterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("clusterid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClusterID"));

                    b.Property<string>("ClusterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("clustername");

                    b.HasKey("ClusterID");

                    b.ToTable("modulecluster", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.ModuleResource", b =>
                {
                    b.Property<int>("ResourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("resourceid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResourceID"));

                    b.Property<int>("ModuleID")
                        .HasColumnType("integer")
                        .HasColumnName("moduleid");

                    b.Property<string>("ResourceType")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("resourcetype");

                    b.Property<string>("ResourceURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resourceurl");

                    b.HasKey("ResourceID");

                    b.HasIndex("ModuleID");

                    b.ToTable("moduleresource", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.Rating", b =>
                {
                    b.Property<long>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ratingid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RatingID"));

                    b.Property<short>("RatingValue")
                        .HasColumnType("smallint")
                        .HasColumnName("ratingvalue");

                    b.HasKey("RatingID");

                    b.ToTable("rating", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.Reply", b =>
                {
                    b.Property<int>("ReplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("replyid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReplyID"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<int>("ForumTopicId")
                        .HasColumnType("integer")
                        .HasColumnName("forumtopicid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("postedat");

                    b.HasKey("ReplyID");

                    b.HasIndex("ForumTopicId");

                    b.ToTable("reply", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.Session", b =>
                {
                    b.Property<long>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sessionid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SessionID"));

                    b.Property<string>("SessionTopic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sessiontopic");

                    b.HasKey("SessionID");

                    b.ToTable("session", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.SessionRating", b =>
                {
                    b.Property<long>("SessionID")
                        .HasColumnType("bigint")
                        .HasColumnName("sessionid");

                    b.Property<long>("RatingID")
                        .HasColumnType("bigint")
                        .HasColumnName("ratingid");

                    b.HasKey("SessionID", "RatingID");

                    b.HasIndex("RatingID");

                    b.ToTable("sessionrating", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.SessionStudent", b =>
                {
                    b.Property<long>("SessionID")
                        .HasColumnType("bigint")
                        .HasColumnName("sessionid");

                    b.Property<long>("StudentID")
                        .HasColumnType("bigint")
                        .HasColumnName("studentid");

                    b.HasKey("SessionID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("sessionstudent", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.SessionTutor", b =>
                {
                    b.Property<long>("SessionID")
                        .HasColumnType("bigint")
                        .HasColumnName("sessionid");

                    b.Property<long>("TutorID")
                        .HasColumnType("bigint")
                        .HasColumnName("tutorid");

                    b.HasKey("SessionID", "TutorID");

                    b.HasIndex("TutorID");

                    b.ToTable("sessiontutor", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.Speciality", b =>
                {
                    b.Property<int>("SpecialityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("specialityid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecialityID"));

                    b.Property<string>("SpecialityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("specialityname");

                    b.HasKey("SpecialityID");

                    b.ToTable("speciality", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.Student", b =>
                {
                    b.Property<long>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("studentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StudentID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("personalemail");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("StudentID");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.StudentTutor", b =>
                {
                    b.Property<long>("StudentID")
                        .HasColumnType("bigint")
                        .HasColumnName("studentid");

                    b.Property<long>("TutorID")
                        .HasColumnType("bigint")
                        .HasColumnName("tutorid");

                    b.HasKey("StudentID", "TutorID");

                    b.HasIndex("TutorID");

                    b.ToTable("studenttutor", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.TopicModule", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("moduleid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleID"));

                    b.Property<int?>("ClusterID")
                        .HasColumnType("integer")
                        .HasColumnName("clusterid");

                    b.Property<long?>("ModuleHeadID")
                        .HasColumnType("bigint")
                        .HasColumnName("moduleheadid");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modulename");

                    b.HasKey("ModuleID");

                    b.HasIndex("ClusterID");

                    b.HasIndex("ModuleHeadID");

                    b.ToTable("topicmodule", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.Tutor", b =>
                {
                    b.Property<long>("TutorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tutorid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TutorID"));

                    b.Property<int?>("SpecialityID")
                        .HasColumnType("integer")
                        .HasColumnName("specialityid");

                    b.Property<string>("TutorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tutorname");

                    b.Property<string>("TutorSurname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tutorsurname");

                    b.HasKey("TutorID");

                    b.HasIndex("SpecialityID");

                    b.ToTable("tutors", (string)null);
                });

            modelBuilder.Entity("CampusLearn.Models.ChatMessage", b =>
                {
                    b.HasOne("CampusLearn.Models.ChatSession", "ChatSession")
                        .WithMany("Messages")
                        .HasForeignKey("ChatSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatSession");
                });

            modelBuilder.Entity("CampusLearn.Models.ChatSession", b =>
                {
                    b.HasOne("CampusLearn.Models.Student", "Student")
                        .WithMany("ChatSessions")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CampusLearn.Models.Degree", b =>
                {
                    b.HasOne("CampusLearn.Models.Faculty", "Faculty")
                        .WithMany("Degrees")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CampusLearn.Models.DegreeModule", b =>
                {
                    b.HasOne("CampusLearn.Models.Degree", "Degree")
                        .WithMany("DegreeModules")
                        .HasForeignKey("DegreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampusLearn.Models.TopicModule", "Module")
                        .WithMany("DegreeModules")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CampusLearn.Models.Enrollment", b =>
                {
                    b.HasOne("CampusLearn.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CampusLearn.Models.EnrollmentDegree", b =>
                {
                    b.HasOne("CampusLearn.Models.Degree", "Degree")
                        .WithMany("EnrollmentDegrees")
                        .HasForeignKey("DegreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampusLearn.Models.Enrollment", "Enrollment")
                        .WithMany("EnrollmentDegrees")
                        .HasForeignKey("EnrollmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("CampusLearn.Models.ModuleResource", b =>
                {
                    b.HasOne("CampusLearn.Models.TopicModule", "Module")
                        .WithMany("ModuleResources")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CampusLearn.Models.Reply", b =>
                {
                    b.HasOne("CampusLearn.Models.ForumTopic", "ForumTopic")
                        .WithMany("Replies")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumTopic");
                });

            modelBuilder.Entity("CampusLearn.Models.SessionRating", b =>
                {
                    b.HasOne("CampusLearn.Models.Rating", "Rating")
                        .WithMany("SessionRatings")
                        .HasForeignKey("RatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampusLearn.Models.Session", "Session")
                        .WithMany("SessionRatings")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("CampusLearn.Models.SessionStudent", b =>
                {
                    b.HasOne("CampusLearn.Models.Session", "Session")
                        .WithMany("SessionStudents")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampusLearn.Models.Student", "Student")
                        .WithMany("SessionStudents")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CampusLearn.Models.SessionTutor", b =>
                {
                    b.HasOne("CampusLearn.Models.Session", "Session")
                        .WithMany("SessionTutors")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampusLearn.Models.Tutor", "Tutor")
                        .WithMany("SessionTutors")
                        .HasForeignKey("TutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("CampusLearn.Models.StudentTutor", b =>
                {
                    b.HasOne("CampusLearn.Models.Student", "Student")
                        .WithMany("StudentTutors")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampusLearn.Models.Tutor", "Tutor")
                        .WithMany("StudentTutors")
                        .HasForeignKey("TutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("CampusLearn.Models.TopicModule", b =>
                {
                    b.HasOne("CampusLearn.Models.ModuleCluster", "ModuleCluster")
                        .WithMany("TopicModules")
                        .HasForeignKey("ClusterID");

                    b.HasOne("CampusLearn.Models.Tutor", "ModuleHead")
                        .WithMany("TopicModules")
                        .HasForeignKey("ModuleHeadID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ModuleCluster");

                    b.Navigation("ModuleHead");
                });

            modelBuilder.Entity("CampusLearn.Models.Tutor", b =>
                {
                    b.HasOne("CampusLearn.Models.Speciality", "Speciality")
                        .WithMany("Tutors")
                        .HasForeignKey("SpecialityID");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("CampusLearn.Models.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("CampusLearn.Models.Degree", b =>
                {
                    b.Navigation("DegreeModules");

                    b.Navigation("EnrollmentDegrees");
                });

            modelBuilder.Entity("CampusLearn.Models.Enrollment", b =>
                {
                    b.Navigation("EnrollmentDegrees");
                });

            modelBuilder.Entity("CampusLearn.Models.Faculty", b =>
                {
                    b.Navigation("Degrees");
                });

            modelBuilder.Entity("CampusLearn.Models.ForumTopic", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("CampusLearn.Models.ModuleCluster", b =>
                {
                    b.Navigation("TopicModules");
                });

            modelBuilder.Entity("CampusLearn.Models.Rating", b =>
                {
                    b.Navigation("SessionRatings");
                });

            modelBuilder.Entity("CampusLearn.Models.Session", b =>
                {
                    b.Navigation("SessionRatings");

                    b.Navigation("SessionStudents");

                    b.Navigation("SessionTutors");
                });

            modelBuilder.Entity("CampusLearn.Models.Speciality", b =>
                {
                    b.Navigation("Tutors");
                });

            modelBuilder.Entity("CampusLearn.Models.Student", b =>
                {
                    b.Navigation("ChatSessions");

                    b.Navigation("Enrollments");

                    b.Navigation("SessionStudents");

                    b.Navigation("StudentTutors");
                });

            modelBuilder.Entity("CampusLearn.Models.TopicModule", b =>
                {
                    b.Navigation("DegreeModules");

                    b.Navigation("ModuleResources");
                });

            modelBuilder.Entity("CampusLearn.Models.Tutor", b =>
                {
                    b.Navigation("SessionTutors");

                    b.Navigation("StudentTutors");

                    b.Navigation("TopicModules");
                });
#pragma warning restore 612, 618
        }
    }
}
