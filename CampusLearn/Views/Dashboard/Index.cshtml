@{
    ViewData["Title"] = "Dashboard";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h2 class="mb-0">Dashboard</h2>
            <small class="text-muted">Interactive overview connected to the database</small>
        </div>
        <!-- If you later want a student switcher, re-add it here -->
    </div>

    <!-- Cards -->
    <div class="row g-3 mb-4">
        <div class="col-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="text-muted">Total Modules</div><div id="card-total" class="display-6">0</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="text-muted">Active Enrollments</div><div id="card-enrolled" class="display-6">0</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="text-muted">Pending Assignments</div><div id="card-assign" class="display-6">0</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="text-muted">Upcoming Tests</div><div id="card-tests" class="display-6">0</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Announcements -->
    <div class="row g-4">
        <div class="col-12">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Announcements</h5>
                    <ul id="ann-list" class="list-group list-group-flush"></ul>
                    <div class="d-grid mt-3">
                        <button id="ann-more" class="btn btn-outline-secondary btn-sm">Load more</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar -->
    <div class="row g-4 mt-1">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="card-title mb-0">Calendar</h5>
                        <div class="btn-group">
                            <button id="cal-prev" class="btn btn-sm btn-outline-secondary">◀</button>
                            <div id="cal-title" class="px-3 d-flex align-items-center fw-semibold"></div>
                            <button id="cal-next" class="btn btn-sm btn-outline-secondary">▶</button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-bordered mb-0" id="cal-grid">
                            <thead class="table-light">
                                <tr>
                                    <th style="width:14.28%">Sun</th>
                                    <th style="width:14.28%">Mon</th>
                                    <th style="width:14.28%">Tue</th>
                                    <th style="width:14.28%">Wed</th>
                                    <th style="width:14.28%">Thu</th>
                                    <th style="width:14.28%">Fri</th>
                                    <th style="width:14.28%">Sat</th>
                                </tr>
                            </thead>
                            <tbody id="cal-body"></tbody>
                        </table>
                    </div>
                    <div class="mt-2 small">
                        <span class="badge bg-primary me-2">Assignment</span>
                        <span class="badge bg-warning text-dark">Test</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ---------------------------
        // Cards
        // ---------------------------
        const elTotal    = document.getElementById('card-total');
        const elEnrolled = document.getElementById('card-enrolled');
        const elAssign   = document.getElementById('card-assign');
        const elTests    = document.getElementById('card-tests');

        async function loadStats(){
          const r = await fetch(`/api/dashboard/stats`);
          if(!r.ok) return;
          const d = await r.json();
          elTotal.textContent    = d.totalModules;
          elEnrolled.textContent = d.activeEnrollments;
          elAssign.textContent   = d.pendingAssignments;
          elTests.textContent    = d.upcomingTests;
        }

        // ---------------------------
        // Announcements (infinite-ish)
        // ---------------------------
        let skip = 0;
        const annList = document.getElementById('ann-list');
        const annMore = document.getElementById('ann-more');

        async function loadMoreAnnouncements(){
          const r = await fetch(`/api/dashboard/announcements?skip=${skip}&take=5`);
          if(!r.ok) return;
          const items = await r.json();
          for (const a of items){
            const li = document.createElement('li');
            li.className = 'list-group-item';
            li.innerHTML = `
              <div class="fw-semibold">
                ${a.topic}
                <span class="badge text-bg-secondary ms-1">${a.progress}</span>
              </div>
              <div class="small text-muted">${new Date(a.createdAt).toLocaleString()}</div>
              <div>${a.discussion ?? ''}</div>`;
            annList.appendChild(li);
          }
          skip += items.length;
          if (items.length < 5){ annMore.disabled = true; annMore.textContent = 'No more'; }
        }

        annMore.addEventListener('click', loadMoreAnnouncements);

        // ---------------------------
        // Calendar
        // ---------------------------
        let calYear, calMonth;
        const elCalTitle = document.getElementById('cal-title');
        const elCalBody  = document.getElementById('cal-body');

        function setMonth(y, m){
          calYear = y; calMonth = m;
          const dt = new Date(y, m - 1, 1);
          elCalTitle.textContent = dt.toLocaleString(undefined, { month: 'long', year: 'numeric' });
        }

        function buildGrid(events){
          elCalBody.innerHTML = '';
          const firstDay    = new Date(calYear, calMonth - 1, 1);
          const startDow    = firstDay.getDay();
          const daysInMonth = new Date(calYear, calMonth, 0).getDate();

          let day = 1;
          for (let row = 0; row < 6; row++){
            const tr = document.createElement('tr');
            for (let col = 0; col < 7; col++){
              const td = document.createElement('td');
              td.style.verticalAlign = 'top';
              td.style.height = '110px';
              td.className = 'align-top';

              const idx = row * 7 + col;
              if (idx >= startDow && day <= daysInMonth){
                const header = document.createElement('div');
                header.className = 'small text-muted mb-1';
                header.textContent = String(day);
                td.appendChild(header);

                const key = `${calYear}-${String(calMonth).padStart(2,'0')}-${String(day).padStart(2,'0')}`;
                (events[key] || []).forEach(ev => {
                  const isTest = ev.type === 'Test';
                  const badge = document.createElement('div');
                  badge.className = `badge ${isTest ? 'bg-warning text-dark' : 'bg-primary'} text-wrap me-1 mb-1`;
                  badge.style.whiteSpace = 'normal';
                  badge.innerText = `${ev.moduleName}: ${ev.title}`;
                  td.appendChild(badge);
                });

                day++;
              }
              tr.appendChild(td);
            }
            elCalBody.appendChild(tr);
            if (day > daysInMonth) break;
          }
        }

        async function loadCalendar(){
          const r = await fetch(`/api/dashboard/calendar?year=${calYear}&month=${calMonth}`);
          if(!r.ok) return;
          const items = await r.json();

          // Timezone-safe: API returns ISO strings; slice date part directly
          const map = {};
          for (const ev of items){
            const key = (typeof ev.eventDate === 'string')
              ? ev.eventDate.slice(0,10)
              : new Date(ev.eventDate).toISOString().slice(0,10);
            (map[key] ||= []).push(ev);
          }
          buildGrid(map);
        }

        function prevMonth(){
          const d = new Date(calYear, calMonth - 2, 1);
          setMonth(d.getFullYear(), d.getMonth() + 1);
          loadCalendar();
        }
        function nextMonth(){
          const d = new Date(calYear, calMonth, 1);
          setMonth(d.getFullYear(), d.getMonth() + 1);
          loadCalendar();
        }

        document.getElementById('cal-prev').addEventListener('click', prevMonth);
        document.getElementById('cal-next').addEventListener('click', nextMonth);

        // ---------------------------
        // Boot
        // ---------------------------
        (function init(){
          const now = new Date();
          setMonth(now.getFullYear(), now.getMonth() + 1);
          loadStats();
          loadMoreAnnouncements();
          loadCalendar();
          // optional: refresh cards periodically
          setInterval(loadStats, 15000);
        })();
    </script>
}
<style>
    /* --- Dashboard polish --- */
    .container.py-4 {
        max-width: 1200px;
    }

    /* Cards */
    .card.shadow-sm {
        border: 1px solid #eef2f7;
        border-radius: 12px;
    }

    .card-body .display-6 {
        font-weight: 700;
        line-height: 1;
        letter-spacing: -0.02em;
    }

    .card .text-muted {
        color: #6b7280 !important;
    }

    /* Announcements */
    #ann-list .list-group-item {
        border-left: 0;
        border-right: 0;
        padding: 0.85rem 0.75rem;
    }

        #ann-list .list-group-item + .list-group-item {
            border-top-color: #edf0f3;
        }

    #ann-more {
        border-radius: 10px;
    }

    /* Calendar container */
    #cal-grid {
        table-layout: fixed;
    }

        #cal-grid thead th {
            text-align: center;
            font-weight: 700;
            color: #334155;
            background: #f8fafc !important;
            border-color: #e5e7eb !important;
        }

        #cal-grid tbody td {
            vertical-align: top !important;
            border-color: #e5e7eb !important;
            padding: 6px 8px;
            background: #fff;
        }

            /* Day header inside cell */
            #cal-grid tbody td > .small.text-muted {
                color: #6b7280 !important;
                font-weight: 600;
            }

        /* Event badges inside calendar cells */
        #cal-grid .badge {
            display: inline-block;
            max-width: 100%;
            overflow-wrap: anywhere;
            white-space: normal !important;
            padding: 0.35rem 0.5rem;
            border-radius: 8px;
            font-weight: 600;
        }
        /* Subtle hover so cells feel interactive */
        #cal-grid tbody td:hover {
            background: #f9fbff;
        }

    /* Calendar title + controls */
    #cal-title {
        min-width: 180px;
        justify-content: center;
    }

    #cal-prev, #cal-next {
        border-radius: 8px;
    }
    /*
        body.dark .card,
        body.dark #cal-grid tbody td {
            background: #0f172a;
            border-color: #1f2937;
        }

        body.dark .table-light th {
            background: #111827 !important;
            color: #e5e7eb;
        }

        body.dark .text-muted {
            color: #9ca3af !important;
        }

        body.dark #cal-grid tbody td:hover {
            background: #111827;
        }
    */
    /* Optional: very light dark-mode support if you toggle a .dark class on */

</style>

