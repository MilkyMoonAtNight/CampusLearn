@{
    ViewData["Title"] = "Dashboard";
    var initialStudentId = (long)(ViewData["StudentId"] ?? 1001L);
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h2 class="mb-0">Dashboard</h2>
            <small class="text-muted">Interactive overview connected to the database</small>
        </div>
        <div class="d-flex gap-2 align-items-center">
            <label class="me-2 small text-muted">Student:</label>
            <select id="studentId" class="form-select form-select-sm" style="min-width:220px"></select>
        </div>
    </div>

    <!-- Cards -->
    <div class="row g-3 mb-4">
        <div class="col-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="text-muted">Total Modules</div><div id="card-total" class="display-6">0</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="text-muted">Active Enrollments</div><div id="card-enrolled" class="display-6">0</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="text-muted">Pending Assignments</div><div id="card-assign" class="display-6">0</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-lg-3">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <div class="text-muted">Upcoming Tests</div><div id="card-tests" class="display-6">0</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Announcements -->
    <div class="row g-4">
        <div class="col-12">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Announcements</h5>
                    <ul id="ann-list" class="list-group list-group-flush"></ul>
                    <div class="d-grid mt-3">
                        <button id="ann-more" class="btn btn-outline-secondary btn-sm">Load more</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar -->
    <div class="row g-4 mt-1">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="card-title mb-0">Calendar</h5>
                        <div class="btn-group">
                            <button id="cal-prev" class="btn btn-sm btn-outline-secondary">◀</button>
                            <div id="cal-title" class="px-3 d-flex align-items-center fw-semibold"></div>
                            <button id="cal-next" class="btn btn-sm btn-outline-secondary">▶</button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-bordered mb-0" id="cal-grid">
                            <thead class="table-light">
                                <tr>
                                    <th style="width:14.28%">Sun</th>
                                    <th style="width:14.28%">Mon</th>
                                    <th style="width:14.28%">Tue</th>
                                    <th style="width:14.28%">Wed</th>
                                    <th style="width:14.28%">Thu</th>
                                    <th style="width:14.28%">Fri</th>
                                    <th style="width:14.28%">Sat</th>
                                </tr>
                            </thead>
                            <tbody id="cal-body"></tbody>
                        </table>
                    </div>
                    <div class="mt-2 small">
                        <span class="badge bg-primary me-2">Assignment</span>
                        <span class="badge bg-warning text-dark">Test</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let skip = 0;
        const sidEl = document.getElementById('studentId');

        const elTotal = document.getElementById('card-total');
        const elEnrolled = document.getElementById('card-enrolled');
        const elAssign = document.getElementById('card-assign');
        const elTests = document.getElementById('card-tests');
        const annList = document.getElementById('ann-list');
        const annMore = document.getElementById('ann-more');

        // ---- helpers ----
        function getQueryId(){
            const u = new URL(window.location.href);
            const id = u.searchParams.get('studentId');
            return id ? Number(id) : null;
        }

        async function loadStudents(){
            const r = await fetch('/api/dashboard/students');
            if(!r.ok) return;
            const students = await r.json();

            // Fill dropdown
            sidEl.innerHTML = '';
            for(const s of students){
                const opt = document.createElement('option');
                opt.value = s.studentId;
                opt.textContent = `${s.displayName} (#${s.studentId})`;
                sidEl.appendChild(opt);
            }

            // Choose default
            const qsId = getQueryId();
            if(qsId && students.some(s => s.studentId === qsId)){
                sidEl.value = qsId;
            } else if (students.length){
                sidEl.value = students[0].studentId;
            }

            // Kick off first load
            reloadAll();
        }

        // ---- Cards ----
        async function loadStats(){
            const sid = sidEl.value;
            const r = await fetch(`/api/dashboard/stats?studentId=${sid}`);
            if(!r.ok) return;
            const d = await r.json();
            elTotal.textContent = d.totalModules;
            elEnrolled.textContent = d.activeEnrollments;
            elAssign.textContent = d.pendingAssignments;
            elTests.textContent = d.upcomingTests;
        }

        // ---- Announcements ----
        async function loadMoreAnnouncements(){
            const r = await fetch(`/api/dashboard/announcements?skip=${skip}&take=5`);
            if(!r.ok) return;
            const items = await r.json();
            for(const a of items){
                const li = document.createElement('li');
                li.className = 'list-group-item';
                li.innerHTML = `<div class="fw-semibold">${a.topic} <span class="badge text-bg-secondary ms-1">${a.progress}</span></div>
                                <div class="small text-muted">${new Date(a.createdAt).toLocaleString()}</div>
                                <div>${a.discussion}</div>`;
                annList.appendChild(li);
            }
            skip += items.length;
            if(items.length < 5){ annMore.disabled = true; annMore.textContent = 'No more'; }
        }

        // ---- Calendar ----
        let calYear, calMonth;
        const elCalTitle = document.getElementById('cal-title');
        const elCalBody = document.getElementById('cal-body');
        const elPrev = document.getElementById('cal-prev');
        const elNext = document.getElementById('cal-next');

        function setMonth(y, m){
            calYear = y; calMonth = m;
            const dt = new Date(y, m-1, 1);
            elCalTitle.textContent = dt.toLocaleString(undefined, { month: 'long', year: 'numeric' });
        }

        function buildGrid(events){
            elCalBody.innerHTML = '';
            const firstDay = new Date(calYear, calMonth-1, 1);
            const startDow = firstDay.getDay();
            const daysInMonth = new Date(calYear, calMonth, 0).getDate();

            let day = 1;
            for(let row=0; row<6; row++){
                const tr = document.createElement('tr');
                for(let col=0; col<7; col++){
                    const td = document.createElement('td');
                    td.style.verticalAlign = 'top';
                    td.style.height = '110px';
                    td.className = 'align-top';

                    const idx = row*7 + col;
                    if(idx >= startDow && day <= daysInMonth){
                        const header = document.createElement('div');
                        header.className = 'small text-muted mb-1';
                        header.textContent = day.toString();
                        td.appendChild(header);

                        const key = new Date(calYear, calMonth-1, day).toISOString().slice(0,10);
                        (events[key] || []).forEach(ev => {
                            const badge = document.createElement('div');
                            const isTest = ev.type === 'Test';
                            badge.className = `badge ${isTest ? 'bg-warning text-dark' : 'bg-primary'} text-wrap me-1 mb-1`;
                            badge.style.whiteSpace = 'normal';
                            badge.innerText = `${ev.moduleName}: ${ev.title}`;
                            td.appendChild(badge);
                        });
                        day++;
                    }
                    tr.appendChild(td);
                }
                elCalBody.appendChild(tr);
                if(day > daysInMonth) break;
            }
        }

        async function loadCalendar(){
            const sid = sidEl.value;
            const r = await fetch(`/api/dashboard/calendar?studentId=${sid}&year=${calYear}&month=${calMonth}`);
            if(!r.ok) return;
            const items = await r.json();
            const map = {};
            for(const ev of items){
                const key = new Date(ev.eventDate).toISOString().slice(0,10);
                (map[key] ||= []).push(ev);
            }
            buildGrid(map);
        }

        function prevMonth(){ const d = new Date(calYear, calMonth-2, 1); setMonth(d.getFullYear(), d.getMonth()+1); loadCalendar(); }
        function nextMonth(){ const d = new Date(calYear, calMonth, 1);   setMonth(d.getFullYear(), d.getMonth()+1); loadCalendar(); }

        function reloadAll(){
            skip = 0; annList.innerHTML = ''; annMore.disabled = false; annMore.textContent = 'Load more';
            loadStats(); loadMoreAnnouncements(); loadCalendar();
        }

        sidEl.addEventListener('change', reloadAll);
        annMore.addEventListener('click', loadMoreAnnouncements);
        document.getElementById('cal-prev').addEventListener('click', prevMonth);
        document.getElementById('cal-next').addEventListener('click', nextMonth);

        // boot
        const now = new Date();
        setMonth(now.getFullYear(), now.getMonth()+1);
        loadStudents();                 // << fetch list from DB, then reloadAll()
        setInterval(loadStats, 15000);
    </script>
}




