@{
    ViewData["Title"] = "AI Chat Assistant";
}
<style>
    /* AI Chat styles - integrates with site theme variables defined in _Layout.cshtml */
    :root {
        /* fallback values in case variables are not defined upstream */
        --cl-primary: var(--primary, #6a0dad);
        --cl-primary-600: var(--primary-600, #5a0099);
        --cl-muted: var(--muted, #6b7280);
        --cl-surface: rgba(255,255,255,0.96);
        --cl-shadow: 0 10px 30px rgba(16,18,38,0.06);
        --cl-radius: 12px;
    }

    /* Chat container */
    .ai-chat {
        max-width: 980px;
        margin-left: auto;
        margin-right: auto;
        color: #0f172a;
        font-family: Inter, system-ui, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }

    /* Messages viewport */
    .ai-chat__messages {
        height: 420px;
        overflow-y: auto;
        padding: 1rem;
        border-radius: 12px;
        background: linear-gradient(180deg, rgba(250,250,252,0.9), rgba(245,245,246,0.9));
        border: 1px solid rgba(16,18,38,0.04);
        box-shadow: var(--cl-shadow);
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    /* Composer area (input) */
    .ai-chat__composer {
        position: relative;
        margin-top: 0.5rem;
        background: transparent;
        border: none;
        box-shadow: none;
        padding: 0.5rem;
    }

    /* Input field */
    .ai-chat__input {
        border-radius: 999px;
        padding: 0.65rem 0.9rem;
        border: 1px solid rgba(16,18,38,0.06);
        box-shadow: 0 4px 18px rgba(16,18,38,0.03) inset;
    }

    /* Send button */
    .ai-chat__send {
        border-radius: 999px;
        display: inline-flex;
        align-items: center;
        gap: 0.4rem;
        padding: 0.45rem 0.8rem;
        background: linear-gradient(90deg, var(--cl-primary), var(--cl-primary-600));
        border: none;
        color: #fff;
        box-shadow: 0 8px 20px rgba(106,13,173,0.12);
        transition: transform 140ms ease, box-shadow 140ms ease;
    }

        .ai-chat__send:hover, .ai-chat__send:focus {
            transform: translateY(-3px);
            box-shadow: 0 12px 28px rgba(106,13,173,0.14);
        }

    /* Message bubble base */
    .ai-msg {
        display: flex;
        flex-direction: column;
        max-width: 78%;
        gap: 0.25rem;
        align-self: flex-start;
    }

    /* user messages align to right */
    .ai-msg--user {
        align-self: flex-end;
        text-align: right;
    }

    /* AI messages align to left */
    .ai-msg--ai {
        align-self: flex-start;
        text-align: left;
    }

    /* Error / system */
    .ai-msg--error {
        align-self: center;
        text-align: center;
    }

    /* bubble styling */
    .ai-msg__bubble {
        padding: 0.6rem 0.9rem;
        border-radius: 14px;
        font-weight: 600;
        box-shadow: 0 6px 20px rgba(16,18,38,0.04);
        word-break: break-word;
        white-space: pre-wrap;
    }

    /* User bubble visual */
    .ai-msg--user .ai-msg__bubble {
        background: linear-gradient(90deg, var(--cl-primary), var(--cl-primary-600));
        color: #fff;
        border-bottom-right-radius: 4px;
    }

    /* AI bubble visual */
    .ai-msg--ai .ai-msg__bubble {
        background: linear-gradient(180deg, rgba(250,250,252,0.98), rgba(245,245,246,0.98));
        color: #0f172a;
        border: 1px solid rgba(16,18,38,0.04);
        border-bottom-left-radius: 4px;
    }

    /* Error bubble */
    .ai-msg--error .ai-msg__bubble {
        background: rgba(220,38,38,0.95);
        color: #fff;
    }

    /* meta (who & time) */
    .ai-msg__meta {
        font-size: 0.78rem;
        color: var(--cl-muted);
    }

    /* Make long messages look good on narrow screens */
    @@media (max-width: 576px) {
        .ai-chat__messages

    {
        height: 56vh;
        padding: 0.75rem;
    }

    .ai-msg {
        max-width: 100%;
    }

    .ai-chat__composer .input-group .form-control {
        padding-right: 0.55rem;
    }

    }

    /* subtle focus for input */
    .ai-chat__input:focus {
        outline: none;
        box-shadow: 0 0 0 0.12rem rgba(106,13,173,0.12);
    }

    /* small accessibility tweak for reduced motion users */
    @@media (prefers-reduced-motion: reduce) {
        .ai-chat__send, .ai-chat__send svg

    {
        transition: none !important;
    }

    }
</style>
<div class="container mt-4">
    <h2 class="text-center mb-4">CampusLearn AI Assistant</h2>

    <div id="chatBox" class="border rounded p-3 mb-3" style="height: 400px; overflow-y: auto; background-color: #f8f9fa;">
        <!-- Messages appear here -->
    </div>

    <div class="ai-chat__composer card p-3">
        <div class="input-group">
            <input type="text" id="userInput" class="form-control ai-chat__input" placeholder="Ask the AI something..." aria-label="Ask the AI something" />
            <button id="sendBtn" class="btn btn-primary ai-chat__send" aria-label="Send message">
                <!-- simple send icon -->
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                    <path d="M2 21l21-9L2 3v7l15 2-15 2v7z" fill="currentColor"></path>
                </svg>
                <span class="ms-2 d-none d-sm-inline">Send</span>
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const chatBox = document.getElementById("chatBox");
        const sendBtn = document.getElementById("sendBtn");
        const userInput = document.getElementById("userInput");

        sendBtn.addEventListener("click", sendMessage);
        userInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter") sendMessage();
        });

        async function sendMessage() {
            const question = userInput.value.trim();
            if (!question) return;

            appendMessage("user", question);
            userInput.value = "";

            // === 🔍 Trigger detection ===
            if (detectTutorTrigger(question)) {
                appendMessage("ai", "Okay! I’ll notify a tutor that you need help. 📩");
                highlightTutorRequest();
                return;
            }

            appendMessage("ai", "Thinking... 🤔", { temporary: true });

            try {
                const response = await fetch("/api/AIAssistant/ask", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ question })
                });

                if (!response.ok) {
                    const err = await response.text();
                    updateLastMessage("ai", "Error: " + err);
                    return;
                }

                const data = await response.json();
                updateLastMessage("ai", data.answer);
            } catch (err) {
                updateLastMessage("ai", "Error: " + err.message);
            }
        }

        // === Detect "talk to a tutor" ===
        function detectTutorTrigger(text) {
            const normalized = text.toLowerCase();
            return (
                normalized.includes("talk to a tutor") ||
                normalized.includes("contact tutor") ||
                normalized.includes("message tutor") ||
                normalized.includes("need help from tutor")
            );
        }

        // === Show visual confirmation ===
        function highlightTutorRequest() {
            const div = document.createElement("div");
            div.className = "alert alert-info mt-2";
            div.textContent = "📨 Tutor request has been logged.";
            chatBox.appendChild(div);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function appendMessage(sender, text, opts = {}) {
            // create message wrapper
            const wrapper = document.createElement("div");
            wrapper.classList.add("ai-msg", sender === "user" ? "ai-msg--user" : (sender === "ai" ? "ai-msg--ai" : "ai-msg--error"));

            const bubble = document.createElement("div");
            bubble.classList.add("ai-msg__bubble");
            if (sender === "user") {
                bubble.classList.add("bg-primary", "text-white");
                bubble.textContent = text;
            } else if (sender === "ai") {
                bubble.classList.add("bg-light", "text-dark");
                bubble.textContent = text;
            } else {
                bubble.classList.add("bg-danger", "text-white");
                bubble.textContent = text;
            }

            const meta = document.createElement("div");
            meta.className = "ai-msg__meta text-muted small";
            const now = new Date();
            meta.textContent = `${sender === "user" ? "You" : (sender === "ai" ? "AI" : "System")} • ${now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;

            wrapper.appendChild(bubble);
            wrapper.appendChild(meta);

            // mark temporary assistant messages so they can be replaced
            if (opts.temporary && sender === "ai") {
                wrapper.dataset.temporary = "1";
            }

            chatBox.appendChild(wrapper);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function updateLastMessage(sender, newText) {
            // Find last temporary AI message first; fallback to last ai message.
            let last;
            last = chatBox.querySelector('[data-temporary="1"] .ai-msg__bubble');
            if (!last) {
                const msgs = chatBox.querySelectorAll(".ai-msg--ai .ai-msg__bubble");
                last = msgs[msgs.length - 1];
            }
            if (last) {
                last.textContent = newText;
                // remove temporary marker if present
                const parent = last.closest("[data-temporary]");
                if (parent) parent.removeAttribute("data-temporary");
            }
        }
    </script>
}
